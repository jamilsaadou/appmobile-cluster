import 'dart:io';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:mime/mime.dart'; // ‚Üê NOUVEAU IMPORT N√âCESSAIRE
import 'package:http_parser/http_parser.dart'; // ‚Üê IMPORT POUR MediaType

class PhotoUploadService {
  static const String apiUrl = 'https://rapports-c.org/api';
  static const FlutterSecureStorage _storage = FlutterSecureStorage();

  // ‚úÖ M√âTHODE POUR D√âTECTER LE BON TYPE MIME
  static String _getMimeType(String filePath) {
    // Essayer de d√©tecter automatiquement
    String? mimeType = lookupMimeType(filePath);
    
    if (mimeType != null && mimeType.startsWith('image/')) {
      return mimeType;
    }
    
    // Fallback selon l'extension
    final extension = filePath.toLowerCase().split('.').last;
    switch (extension) {
      case 'jpg':
      case 'jpeg':
        return 'image/jpeg';
      case 'png':
        return 'image/png';
      case 'webp':
        return 'image/webp';
      case 'gif':
        return 'image/gif';
      default:
        return 'image/jpeg'; // Par d√©faut
    }
  }

  // Upload d'images en multipart - VERSION CORRIG√âE
  static Future<List<String>> uploadImages(List<String> localPhotoPaths) async {
    List<String> uploadedFilenames = [];
    
    try {
      print('üì∏ [UPLOAD] D√©but upload de ${localPhotoPaths.length} images...');
      
      final cookie = await _storage.read(key: 'auth_cookie');
      if (cookie == null) {
        print('‚ùå [UPLOAD] Pas de cookie auth');
        return [];
      }

      for (int i = 0; i < localPhotoPaths.length; i++) {
        final localPath = localPhotoPaths[i];
        print('üì∏ [UPLOAD] Image ${i+1}/${localPhotoPaths.length}: $localPath');
        
        final filename = await _uploadSingleImage(localPath, cookie);
        if (filename != null) {
          uploadedFilenames.add(filename);
          print('‚úÖ [UPLOAD] Image ${i+1} upload√©e: $filename');
        } else {
          print('‚ùå [UPLOAD] √âchec image ${i+1}: $localPath');
        }
      }
      
      print('üìä [UPLOAD] Upload termin√©: ${uploadedFilenames.length}/${localPhotoPaths.length}');
      return uploadedFilenames;
      
    } catch (e) {
      print('üí• [UPLOAD] Erreur g√©n√©rale: $e');
      return uploadedFilenames;
    }
  }

  // ‚úÖ Upload d'une seule image - VERSION CORRIG√âE AVEC MIME TYPE
  static Future<String?> _uploadSingleImage(String localPath, String cookie) async {
    try {
      final file = File(localPath);
      if (!await file.exists()) {
        print('‚ùå [UPLOAD] Fichier inexistant: $localPath');
        return null;
      }

      // ‚úÖ D√©tecter le bon type MIME
      final mimeType = _getMimeType(localPath);
      final fileSize = await file.length();
      
      print('üìã [UPLOAD] Infos fichier:');
      print('   - Chemin: $localPath');
      print('   - Taille: ${(fileSize / 1024).toStringAsFixed(1)} KB');
      print('   - Type MIME d√©tect√©: $mimeType');

      // Cr√©er la requ√™te multipart
      final request = http.MultipartRequest(
        'POST',
        Uri.parse('$apiUrl/upload/images'),
      );

      // Ajouter les headers
      request.headers['Cookie'] = cookie;

      // ‚úÖ Ajouter le fichier avec le bon type MIME
      final multipartFile = await http.MultipartFile.fromPath(
        'files', // Nom du champ attendu par l'API
        localPath,
        filename: localPath.split('/').last,
        contentType: MediaType.parse(mimeType), // ‚Üê FIX PRINCIPAL ICI
      );
      
      request.files.add(multipartFile);

      print('üì§ [UPLOAD] Envoi avec type MIME: $mimeType');
      print('üì§ [UPLOAD] Nom fichier: ${localPath.split('/').last}');
      
      // Envoyer la requ√™te
      final streamedResponse = await request.send().timeout(
        const Duration(seconds: 60)
      );
      
      final response = await http.Response.fromStream(streamedResponse);
      
      print('üìä [UPLOAD] Response: ${response.statusCode}');
      print('üìÑ [UPLOAD] Body: ${response.body}');

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        
        // Extraire le nom du fichier upload√© selon le format de r√©ponse
        if (responseData['files'] != null && responseData['files'].isNotEmpty) {
          // Format: {"success": true, "files": [{"filename": "xxx.jpg", "fileName": "xxx.jpg"}]}
          final firstFile = responseData['files'][0];
          final fileName = firstFile['fileName'] ?? firstFile['filename'];
          print('‚úÖ [UPLOAD] Fichier upload√©: $fileName');
          return fileName;
        } else if (responseData['filenames'] != null && responseData['filenames'].isNotEmpty) {
          // Format: {"filenames": ["xxx.jpg"]}
          final fileName = responseData['filenames'][0];
          print('‚úÖ [UPLOAD] Fichier upload√©: $fileName');
          return fileName;
        } else if (responseData['filename'] != null) {
          // Format: {"filename": "xxx.jpg"}
          final fileName = responseData['filename'];
          print('‚úÖ [UPLOAD] Fichier upload√©: $fileName');
          return fileName;
        } else {
          print('‚ö†Ô∏è [UPLOAD] R√©ponse inattendue: $responseData');
        }
      } else {
        print('‚ùå [UPLOAD] Erreur HTTP ${response.statusCode}: ${response.body}');
      }
      
      return null;
    } catch (e) {
      print('üí• [UPLOAD] Erreur upload image: $e');
      return null;
    }
  }

  // Envoyer activit√© avec photos upload√©es
  static Future<bool> sendActivityWithPhotos(
    Map<String, dynamic> activityData,
    List<String> localPhotoPaths,
  ) async {
    try {
      print('üöÄ [SEND] D√©but envoi activit√© avec ${localPhotoPaths.length} photos...');
      
      final cookie = await _storage.read(key: 'auth_cookie');
      if (cookie == null) {
        print('‚ùå [SEND] Pas de cookie auth');
        return false;
      }

      // 1. D'abord uploader les images
      final uploadedFilenames = await uploadImages(localPhotoPaths);
      
      if (uploadedFilenames.isEmpty && localPhotoPaths.isNotEmpty) {
        print('‚ùå [SEND] Aucune image upload√©e, abandon');
        return false;
      }

      // 2. Pr√©parer les donn√©es de l'activit√© avec les noms de fichiers upload√©s
      final finalData = Map<String, dynamic>.from(activityData);
      finalData['photos'] = uploadedFilenames;
      
      print('üì§ [SEND] Donn√©es finales:');
      print('   - Type: ${finalData['typeActivite']}');
      print('   - Photos: ${uploadedFilenames.length} fichiers upload√©s');
      print('   - Photos list: $uploadedFilenames');

      // 3. Envoyer l'activit√©
      final response = await http.post(
        Uri.parse('$apiUrl/activites'),
        headers: {
          'Content-Type': 'application/json',
          'Cookie': cookie,
        },
        body: jsonEncode(finalData),
      ).timeout(const Duration(seconds: 30));

      print('üìä [SEND] Response: ${response.statusCode}');
      print('üìÑ [SEND] Body: ${response.body}');

      if (response.statusCode == 201) {
        print('‚úÖ [SEND] Activit√© cr√©√©e avec succ√®s');
        return true;
      } else {
        print('‚ùå [SEND] Erreur cr√©ation activit√©: ${response.statusCode}');
        return false;
      }
      
    } catch (e) {
      print('üí• [SEND] Erreur: $e');
      return false;
    }
  }

  // ‚úÖ M√âTHODE DE TEST am√©lior√©e
  static Future<void> testImageUpload(String localPath) async {
    try {
      print('üß™ [TEST] ======== TEST UPLOAD ========');
      print('üß™ [TEST] Chemin: $localPath');
      
      final file = File(localPath);
      if (!await file.exists()) {
        print('‚ùå [TEST] Fichier inexistant');
        return;
      }
      
      final size = await file.length();
      final mimeType = _getMimeType(localPath);
      
      print('üß™ [TEST] Taille: ${(size / 1024).toStringAsFixed(1)} KB');
      print('üß™ [TEST] Type MIME: $mimeType');
      
      final cookie = await _storage.read(key: 'auth_cookie');
      if (cookie == null) {
        print('‚ùå [TEST] Pas de cookie');
        return;
      }

      final filename = await _uploadSingleImage(localPath, cookie);
      if (filename != null) {
        print('‚úÖ [TEST] Upload r√©ussi: $filename');
      } else {
        print('‚ùå [TEST] Upload √©chou√©');
      }
      
      print('üß™ [TEST] ========================');
    } catch (e) {
      print('üí• [TEST] Erreur: $e');
    }
  }
}