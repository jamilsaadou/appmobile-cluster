import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'dart:convert';
import 'dart:io';
import '../database/database_helper.dart';
import '../database/models/activity.dart';
import '../services/upload_service.dart';
import '../services/photo_service.dart';

class ActivitiesProvider with ChangeNotifier {
  static const String apiUrl = 'https://rapports-c.org/api';
  static const FlutterSecureStorage _storage = FlutterSecureStorage();
  
  List<Activity> _activities = [];
  bool _isLoading = false;
  String? _error;

  List<Activity> get activities => _activities;
  bool get isLoading => _isLoading;
  String? get error => _error;

  // Ajouter une activit√© (mode offline)
  Future<bool> addActivity(Activity activity) async {
    try {
      print('üöÄ Tentative d\'ajout activit√©: ${activity.type}');
      
      final db = await DatabaseHelper().database;
      
      // V√©rifier les champs obligatoires
      if (activity.type.isEmpty || activity.thematique.isEmpty) {
        print('‚ùå Champs obligatoires manquants');
        return false;
      }
      
      // Pr√©parer les donn√©es
      final activityMap = activity.toMap();
      print('üìù Donn√©es √† ins√©rer: $activityMap');
      
      // Ins√©rer en local
      await db.insert('activities', activityMap);
      print('‚úÖ Activit√© ins√©r√©e en base locale');
      
      // Mettre √† jour la liste
      _activities.insert(0, activity);
      notifyListeners();
      
      // Essayer de synchroniser imm√©diatement
      await _trySyncActivity(activity);
      
      return true;
    } catch (e) {
      print('üí• Erreur addActivity: $e');
      _error = 'Erreur lors de l\'ajout: $e';
      notifyListeners();
      return false;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE : Synchroniser les statuts depuis l'API
  Future<void> syncActivityStatuses() async {
    try {
      print('üîÑ [SYNC_STATUS] D√©but synchronisation des statuts...');
      
      final cookie = await _storage.read(key: 'auth_cookie');
      if (cookie == null) {
        print('‚ö†Ô∏è [SYNC_STATUS] Pas de cookie - pas de sync');
        return;
      }

      // R√©cup√©rer les activit√©s depuis l'API
      final response = await http.get(
        Uri.parse('$apiUrl/activites'),
        headers: {
          'Content-Type': 'application/json',
          'Cookie': cookie,
        },
      ).timeout(const Duration(seconds: 30));

      print('üìä [SYNC_STATUS] Response code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final List<dynamic> apiActivities = jsonDecode(response.body);
        print('üìÑ [SYNC_STATUS] ${apiActivities.length} activit√©s r√©cup√©r√©es de l\'API');

        final db = await DatabaseHelper().database;
        int updatedCount = 0;

        // Mettre √† jour les statuts des activit√©s existantes
        for (final apiActivity in apiActivities) {
          try {
            final apiId = apiActivity['id'];
            if (apiId != null) {
              final statut = apiActivity['statut'] ?? 'en_attente';
              final motifRefus = apiActivity['motifRejet'] ?? apiActivity['motifRefus'];

              // Chercher l'activit√© locale correspondante (par ID si synchronis√©e)
              final existingActivities = await db.query(
                'activities',
                where: 'id = ? OR local_id = ?',
                whereArgs: [apiId, apiId.toString()],
              );

              if (existingActivities.isNotEmpty) {
                final localActivity = existingActivities.first;
                final currentStatus = localActivity['statut'] ?? 'en_attente';

                // Mettre √† jour seulement si le statut a chang√©
                if (currentStatus != statut) {
                  await db.update(
                    'activities',
                    {
                      'statut': statut,
                      'motif_refus': motifRefus,
                      'id': apiId, // S'assurer que l'ID serveur est sauvegard√©
                      'is_synced': 1,
                    },
                    where: 'local_id = ? OR id = ?',
                    whereArgs: [localActivity['local_id'], apiId],
                  );

                  updatedCount++;
                  print('‚úÖ [SYNC_STATUS] Activit√© ${localActivity['local_id']} mise √† jour: $currentStatus -> $statut');
                }
              } else {
                // Activit√© n'existe pas localement, l'ajouter
                final newActivity = Activity.fromApiJson(apiActivity);
                await db.insert('activities', newActivity.toMap());
                updatedCount++;
                print('‚úÖ [SYNC_STATUS] Nouvelle activit√© ajout√©e: ${newActivity.localId}');
              }
            }
          } catch (e) {
            print('‚ö†Ô∏è [SYNC_STATUS] Erreur traitement activit√© individuelle: $e');
          }
        }

        print('üìä [SYNC_STATUS] Synchronisation termin√©e: $updatedCount activit√©s mises √† jour');

        // Recharger les activit√©s depuis la base locale
        await loadLocalActivities();
      } else {
        print('‚ùå [SYNC_STATUS] Erreur API: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('üí• [SYNC_STATUS] Erreur compl√®te: $e');
    }
  }

  // M√©thode _trySyncActivity COMPL√àTEMENT R√â√âCRITE
  Future<void> _trySyncActivity(Activity activity) async {
    try {
      print('üéØ [SYNC] D√©but sync: ${activity.type}');
      print('üéØ [SYNC] Local ID: ${activity.localId}');
      print('üéØ [SYNC] Photos: ${activity.photos?.length ?? 0}');
      
      final cookie = await _storage.read(key: 'auth_cookie');
      if (cookie == null) {
        print('‚ö†Ô∏è [SYNC] Pas de cookie - pas de sync');
        return;
      }

      // Pr√©parer les donn√©es de base
      final apiData = activity.toApiJson();
      print('üìù [SYNC] Donn√©es API de base: $apiData');
      
      // ‚úÖ V√©rifier s'il y a des photos √† envoyer
      if (activity.photos != null && activity.photos!.isNotEmpty) {
        print('üì∏ [SYNC] Activit√© avec ${activity.photos!.length} photos');
        
        // Convertir les noms en chemins complets
        List<String> localPaths = [];
        for (final photoName in activity.photos!) {
          final fullPath = await PhotoService.getPhotoPath(photoName);
          final file = File(fullPath);
          if (await file.exists()) {
            localPaths.add(fullPath);
            print('‚úÖ [SYNC] Photo trouv√©e: $photoName -> $fullPath');
          } else {
            print('‚ùå [SYNC] Photo manquante: $photoName -> $fullPath');
          }
        }
        
        if (localPaths.isNotEmpty) {
          print('üì∏ [SYNC] ${localPaths.length} photos valides trouv√©es');
          
          // ‚úÖ Utiliser le service d'upload corrig√©
          final success = await PhotoUploadService.sendActivityWithPhotos(apiData, localPaths);
          
          if (success) {
            print('‚úÖ [SYNC] Activit√© + photos envoy√©es avec succ√®s');
            await _markActivityAsSynced(activity);
          } else {
            print('‚ùå [SYNC] √âchec envoi activit√© + photos');
          }
          return;
        } else {
          print('‚ö†Ô∏è [SYNC] Aucune photo valide trouv√©e, envoi sans photos');
          // Continuer sans photos
        }
      }
      
      // ‚úÖ Activit√© sans photos OU photos manquantes - m√©thode normale
      print('üì§ [SYNC] Envoi activit√© sans photos');
      print('üì§ [SYNC] Donn√©es: ${jsonEncode(apiData)}');
      
      final response = await http.post(
        Uri.parse('$apiUrl/activites'),
        headers: {
          'Content-Type': 'application/json',
          'Cookie': cookie,
        },
        body: jsonEncode(apiData),
      ).timeout(const Duration(seconds: 30));

      print('üìä [SYNC] Response code: ${response.statusCode}');
      print('üìÑ [SYNC] Response body: ${response.body}');

      if (response.statusCode == 201) {
        print('‚úÖ [SYNC] Activit√© synchronis√©e sans photos');
        
        // ‚úÖ R√©cup√©rer l'ID serveur de la r√©ponse
        try {
          final responseData = jsonDecode(response.body);
          final serverId = responseData['id'];
          if (serverId != null) {
            await _markActivityAsSynced(activity, serverId: serverId);
          } else {
            await _markActivityAsSynced(activity);
          }
        } catch (e) {
          print('‚ö†Ô∏è [SYNC] Erreur parsing r√©ponse: $e');
          await _markActivityAsSynced(activity);
        }
      } else {
        print('‚ùå [SYNC] Erreur: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('üí• [SYNC] Erreur compl√®te: $e');
      print('üí• [SYNC] Stack trace: ${StackTrace.current}');
    }
  }

  // ‚úÖ M√âTHODE helper pour marquer comme synchronis√© (mise √† jour)
  Future<void> _markActivityAsSynced(Activity activity, {int? serverId}) async {
    try {
      final db = await DatabaseHelper().database;
      
      final updateData = <String, dynamic>{
        'is_synced': 1,
      };
      
      // Si on a un ID serveur, le sauvegarder
      if (serverId != null) {
        updateData['id'] = serverId;
      }
      
      final rowsUpdated = await db.update(
        'activities',
        updateData,
        where: 'local_id = ?',
        whereArgs: [activity.localId],
      );
      
      print('üìù [SYNC] Activit√© marqu√©e comme synchronis√©e: $rowsUpdated lignes mises √† jour');
      if (serverId != null) {
        print('üìù [SYNC] ID serveur sauvegard√©: $serverId');
      }
      
      // Recharger la liste des activit√©s
      await loadLocalActivities();
    } catch (e) {
      print('üí• [SYNC] Erreur marquage sync: $e');
    }
  }

  // Charger les activit√©s locales
  Future<void> loadLocalActivities() async {
    try {
      print('üìÇ Chargement activit√©s locales...');
      
      final db = await DatabaseHelper().database;
      final activitiesData = await db.query(
        'activities',
        orderBy: 'date_creation DESC',
      );
      
      print('üìä ${activitiesData.length} activit√©s trouv√©es');
      
      _activities = activitiesData.map((data) {
        try {
          return Activity.fromMap(data);
        } catch (e) {
          print('‚ö†Ô∏è Erreur parsing activit√©: $e');
          print('üìù Donn√©es: $data');
          return null;
        }
      }).where((activity) => activity != null).cast<Activity>().toList();
      
      notifyListeners();
    } catch (e) {
      print('üí• Erreur loadLocalActivities: $e');
    }
  }

  // ‚úÖ M√âTHODE MISE √Ä JOUR : Synchroniser toutes les activit√©s et les statuts
  Future<int> syncPendingActivities() async {
    int syncCount = 0;
    
    try {
      print('üîÑ D√©but synchronisation compl√®te...');
      
      // 1. D'abord synchroniser les statuts depuis l'API
      await syncActivityStatuses();
      
      // 2. Ensuite envoyer les activit√©s non synchronis√©es
      final db = await DatabaseHelper().database;
      final pendingActivities = await db.query(
        'activities',
        where: 'is_synced = ?',
        whereArgs: [0],
      );

      print('üìä ${pendingActivities.length} activit√©s √† synchroniser');

      for (final activityData in pendingActivities) {
        try {
          final activity = Activity.fromMap(activityData);
          print('üîÑ Sync activit√©: ${activity.type} (${activity.localId})');
          await _trySyncActivity(activity);
          syncCount++;
        } catch (e) {
          print('‚ö†Ô∏è Erreur sync activit√© individuelle: $e');
        }
      }
      
      print('üìä Synchronisation termin√©e: $syncCount activit√©s trait√©es');
    } catch (e) {
      print('üí• Erreur syncPendingActivities: $e');
    }

    return syncCount;
  }

  // R√©cup√©rer une activit√© par ID
  Future<Activity?> getActivityById(dynamic id) async {
    try {
      final db = await DatabaseHelper().database;
      
      List<Map<String, dynamic>> results;
      if (id is String) {
        // Recherche par local_id
        results = await db.query(
          'activities',
          where: 'local_id = ?',
          whereArgs: [id],
        );
      } else {
        // Recherche par id
        results = await db.query(
          'activities',
          where: 'id = ?',
          whereArgs: [id],
        );
      }

      if (results.isNotEmpty) {
        return Activity.fromMap(results.first);
      }
      return null;
    } catch (e) {
      print('üí• Erreur getActivityById: $e');
      return null;
    }
  }

  // Mettre √† jour une activit√©
  Future<bool> updateActivity(Activity activity) async {
    try {
      print('üîÑ [UPDATE] D√©but mise √† jour activit√©: ${activity.type}');
      
      final db = await DatabaseHelper().database;
      
      // Mettre √† jour en base locale
      final activityMap = activity.toMap();
      activityMap['is_synced'] = 0; // Marquer comme non synchronis√©
      
      int rowsUpdated;
      if (activity.id != null) {
        rowsUpdated = await db.update(
          'activities',
          activityMap,
          where: 'id = ?',
          whereArgs: [activity.id],
        );
      } else {
        rowsUpdated = await db.update(
          'activities',
          activityMap,
          where: 'local_id = ?',
          whereArgs: [activity.localId],
        );
      }
      
      print('‚úÖ [UPDATE] Activit√© mise √† jour: $rowsUpdated lignes affect√©es');
      
      // Recharger la liste
      await loadLocalActivities();
      
      // Essayer de synchroniser imm√©diatement
      await _trySyncActivity(activity);
      
      return rowsUpdated > 0;
    } catch (e) {
      print('üí• [UPDATE] Erreur updateActivity: $e');
      _error = 'Erreur lors de la mise √† jour: $e';
      notifyListeners();
      return false;
    }
  }

  // ‚úÖ NOUVELLE M√âTHODE : Synchroniser automatiquement les statuts
  Future<void> autoSyncStatuses() async {
    try {
      print('‚è∞ [AUTO_SYNC] Synchronisation automatique des statuts...');
      await syncActivityStatuses();
      print('‚úÖ [AUTO_SYNC] Synchronisation automatique termin√©e');
    } catch (e) {
      print('üí• [AUTO_SYNC] Erreur: $e');
    }
  }
}